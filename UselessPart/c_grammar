Prog->Dstr
Dstr->Decl Stem
Stem->Dstr
Decl->int ID Type
Decl->void ID Func
Type->Vari
Type->Func
Vari->;
Func->( Vpam ) Bloc
Vpam->Pist
Vpam->void
Pist->Parm Ptem
Ptem->, Pist
Parm->int ID
Bloc->{ Kdec Lstr }
Kdec->Kvde ; Kdec
Kvde->int ID
Lstr->Lang Ltem
Ltem->Lstr
Lang->Ifla
Lang->Whla
Lang->Rela
Lang->Asla
Asla->ID = Expr ;
Rela->return Rtem ;
Rtem->Expr
Whla->while ( Expr ) Bloc
Ifla->if ( Expr ) Bloc Etem
Etem->else Bloc
Expr->Aexp Atem
Atem->< Expr
Atem-><= Expr
Atem->> Expr
Atem->>= Expr
Atem->== Expr
Atem->!= Expr
Aexp->Item Itmp
Itmp->+ Aexp
Itmp->- Aexp
Item->Fact Ftem
Ftem->* Item
Ftem->/ Item
Fact->NUM
Fact->( Expr )
Fact->ID FTYP
FTYP->Call
Call->( Rist )
Rpam->Rist
Rist->Expr Rltm
Rltm->, Rist
