Program->Funcs
Funcs->FuncsHead { CodeBody } Funcs
FuncsHead->Type ID ( FormalParameters )
Funcs->$
FormalParameters->Type ID FormalParameters
FormalParameters->, Type ID FormalParameters
FormalParameters->$
Type->int
Type->void
Type->float
Type->char
CodeBody->$
CodeBody->LocalDefineList CodeList
LocalDefineList->LocalVarDefine LocalDefineList
LocalDefineList->$
LocalVarDefine->Type ID ;
CodeList->Code CodeList
CodeList->$
Code->NormalStatement
NormalStatement->ID @PUSH_VAL NormalStatementFollow
NormalStatementFollow->= @SAVE_= Operation @GEQ_G ;
Operation->T A
A->M T @GEQ_G A
A->$
T->F B
B->N F @GEQ_G B
B->$
F->ID @PUSH_VAL
F->NUM @PUSH_VAL
F->( Operation )
M->+ @SAVE_+
M->- @SAVE_-
N->* @SAVE_*
N->/ @SAVE_/
Code->IfStatement
IfStatement->if ( JudgeStatement ) { CodeBody } IFStatementFollow
IFStatementFollow->$
IFStatementFollow->ElseIFPart ElsePart
ElsePart->$
ElsePart->else { CodeBody }
ElseIFPart->elif ( JudgeStatement ) { CodeBody } ElseIFPart
ElseIFPart->$
JudgeStatement->Operation JudgeStatementFollow
JudgeStatementFollow->CompareSymbol Operation @GEQ_G
JudgeStatementFollow->$
CompareSymbol->== @SAVE_==
CompareSymbol-><= @SAVE_<=
CompareSymbol->>= @SAVE_>=
CompareSymbol->< @SAVE_<
CompareSymbol->> @SAVE_>
Code->LoopStatement
LoopStatement->while ( JudgeStatement ) { CodeBody }
Code->return Operation ;
Code->FuncCall
FuncCall->FUN ID FuncCallFollow ;
FuncCallFollow->= ID ( Args )
FuncCallFollow->( Args )
Args->arg Args
Args->, arg Args
Args->$
arg->ID
arg->NUM