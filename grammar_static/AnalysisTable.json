{"FuncCallFollow": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": 55, "while": -1, "int": -1, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": 56, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "A": {"return": -1, "-": 22, "==": 23, "<=": 23, ">=": 23, ">": 23, "*": -1, "<": 23, ";": 23, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": 22, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": 23, "#": 23}, "T": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": 24, "{": -1, ",": -1, "if": -1, "elif": -1, "(": 24, "void": -1, "NUM": 24, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "M": {"return": -1, "-": 31, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": 30, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "IfStatement": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": -1, "{": -1, ",": -1, "if": 35, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "NormalStatementFollow": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": 20, "while": -1, "int": -1, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "IFStatementFollow": {"return": 36, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": 36, "CALL": 36, "=": -1, "while": 36, "int": -1, "+": -1, "ID": 36, "{": -1, ",": -1, "if": 36, "elif": 37, "(": -1, "void": -1, "NUM": -1, "else": 37, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": 36}, "JudgeStatementFollow": {"return": -1, "-": -1, "==": 43, "<=": 43, ">=": 43, ">": 43, "*": -1, "<": 43, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": 44, "#": 44}, "FormalParameters": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": 4, "+": -1, "ID": -1, "{": -1, ",": 5, "if": -1, "elif": -1, "(": -1, "void": 4, "NUM": -1, "else": -1, "float": 4, "struct": -1, "/": -1, "char": 4, ")": 6, "#": 6}, "LocalVarDefine": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": 15, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": 15, "NUM": -1, "else": -1, "float": 15, "struct": -1, "/": -1, "char": 15, ")": -1, "#": -1}, "Args": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": 57, "{": -1, ",": 58, "if": -1, "elif": -1, "(": 57, "void": -1, "NUM": 57, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": 59, "#": 59}, "FuncsHead": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": 2, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": 2, "NUM": -1, "else": -1, "float": 2, "struct": -1, "/": -1, "char": 2, ")": -1, "#": -1}, "FuncCall": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": 54, "=": -1, "while": -1, "int": -1, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "Operation": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": 21, "{": -1, ",": -1, "if": -1, "elif": -1, "(": 21, "void": -1, "NUM": 21, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "ElseIFPart": {"return": 41, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": 41, "CALL": 41, "=": -1, "while": 41, "int": -1, "+": -1, "ID": 41, "{": -1, ",": -1, "if": 41, "elif": 40, "(": -1, "void": -1, "NUM": -1, "else": 41, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": 41}, "CodeBody": {"return": 12, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": 11, "CALL": 12, "=": -1, "while": 12, "int": 12, "+": -1, "ID": 12, "{": -1, ",": -1, "if": 12, "elif": -1, "(": -1, "void": 12, "NUM": -1, "else": -1, "float": 12, "struct": -1, "/": -1, "char": 12, ")": -1, "#": -1}, "CompareSymbol": {"return": -1, "-": -1, "==": 45, "<=": 46, ">=": 47, ">": 49, "*": -1, "<": 48, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "N": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": 32, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": 33, "char": -1, ")": -1, "#": -1}, "LocalDefineList": {"return": 14, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": 14, "CALL": 14, "=": -1, "while": 14, "int": 13, "+": -1, "ID": 14, "{": -1, ",": -1, "if": 14, "elif": -1, "(": -1, "void": 13, "NUM": -1, "else": -1, "float": 13, "struct": -1, "/": -1, "char": 13, ")": -1, "#": 14}, "B": {"return": -1, "-": 26, "==": 26, "<=": 26, ">=": 26, ">": 26, "*": 25, "<": 26, ";": 26, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": 26, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": 25, "char": -1, ")": 26, "#": 26}, "ElsePart": {"return": 38, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": 38, "CALL": 38, "=": -1, "while": 38, "int": -1, "+": -1, "ID": 38, "{": -1, ",": -1, "if": 38, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": 39, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": 38}, "Code": {"return": 52, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": 53, "=": -1, "while": 50, "int": -1, "+": -1, "ID": 18, "{": -1, ",": -1, "if": 34, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "Type": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": 7, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": 8, "NUM": -1, "else": -1, "float": 9, "struct": -1, "/": -1, "char": 10, ")": -1, "#": -1}, "Struct": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": 61, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": 61, "NUM": -1, "else": -1, "float": 61, "struct": 60, "/": -1, "char": 61, ")": -1, "#": 61}, "NormalStatement": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": 19, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "F": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": 27, "{": -1, ",": -1, "if": -1, "elif": -1, "(": 29, "void": -1, "NUM": 28, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "Funcs": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": 1, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": 1, "NUM": -1, "else": -1, "float": 1, "struct": -1, "/": -1, "char": 1, ")": -1, "#": 3}, "CodeList": {"return": 16, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": 17, "CALL": 16, "=": -1, "while": 16, "int": -1, "+": -1, "ID": 16, "{": -1, ",": -1, "if": 16, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": 17}, "LoopStatement": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": 51, "int": -1, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": -1, "NUM": -1, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}, "Program": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": 0, "+": -1, "ID": -1, "{": -1, ",": -1, "if": -1, "elif": -1, "(": -1, "void": 0, "NUM": -1, "else": -1, "float": 0, "struct": 0, "/": -1, "char": 0, ")": -1, "#": -1}, "JudgeStatement": {"return": -1, "-": -1, "==": -1, "<=": -1, ">=": -1, ">": -1, "*": -1, "<": -1, ";": -1, "}": -1, "CALL": -1, "=": -1, "while": -1, "int": -1, "+": -1, "ID": 42, "{": -1, ",": -1, "if": -1, "elif": -1, "(": 42, "void": -1, "NUM": 42, "else": -1, "float": -1, "struct": -1, "/": -1, "char": -1, ")": -1, "#": -1}}