{"ElsePart": {">": -1, "}": 38, "{": -1, "=": -1, "while": 38, "(": -1, "ID": 38, "CALL": 38, "void": -1, "NUM": -1, "if": 38, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": 38, "<=": -1, "char": -1, "int": -1, "float": -1, "else": 39, ">=": -1, "*": -1, ";": -1, "#": 38}, "IFStatementFollow": {">": -1, "}": 36, "{": -1, "=": -1, "while": 36, "(": -1, "ID": 36, "CALL": 36, "void": -1, "NUM": -1, "if": 36, "<": -1, ",": -1, "/": -1, "elif": 37, "+": -1, "-": -1, ")": -1, "==": -1, "return": 36, "<=": -1, "char": -1, "int": -1, "float": -1, "else": 37, ">=": -1, "*": -1, ";": -1, "#": 36}, "Operation": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": 21, "ID": 21, "CALL": -1, "void": -1, "NUM": 21, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "A": {">": 23, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": 23, ",": -1, "/": -1, "elif": -1, "+": 22, "-": 22, ")": 23, "==": 23, "return": -1, "<=": 23, "char": -1, "int": -1, "float": -1, "else": -1, ">=": 23, "*": -1, ";": 23, "#": 23}, "JudgeStatement": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": 42, "ID": 42, "CALL": -1, "void": -1, "NUM": 42, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "M": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": 30, "-": 31, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "IfStatement": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": 35, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "Code": {">": -1, "}": -1, "{": -1, "=": -1, "while": 50, "(": -1, "ID": 18, "CALL": 53, "void": -1, "NUM": -1, "if": 34, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": 52, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "LocalVarDefine": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": 15, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": 15, "int": 15, "float": 15, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "T": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": 24, "ID": 24, "CALL": -1, "void": -1, "NUM": 24, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "LocalDefineList": {">": -1, "}": 14, "{": -1, "=": -1, "while": 14, "(": -1, "ID": 14, "CALL": 14, "void": 13, "NUM": -1, "if": 14, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": 14, "<=": -1, "char": 13, "int": 13, "float": 13, "else": -1, ">=": -1, "*": -1, ";": -1, "#": 14}, "Args": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": 57, "ID": 57, "CALL": -1, "void": -1, "NUM": 57, "if": -1, "<": -1, ",": 58, "/": -1, "elif": -1, "+": -1, "-": -1, ")": 59, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": 59}, "CompareSymbol": {">": 49, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": 48, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": 45, "return": -1, "<=": 46, "char": -1, "int": -1, "float": -1, "else": -1, ">=": 47, "*": -1, ";": -1, "#": -1}, "FormalParameters": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": 4, "NUM": -1, "if": -1, "<": -1, ",": 5, "/": -1, "elif": -1, "+": -1, "-": -1, ")": 6, "==": -1, "return": -1, "<=": -1, "char": 4, "int": 4, "float": 4, "else": -1, ">=": -1, "*": -1, ";": -1, "#": 6}, "N": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": 33, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": 32, ";": -1, "#": -1}, "NormalStatement": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": 19, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "ElseIFPart": {">": -1, "}": 41, "{": -1, "=": -1, "while": 41, "(": -1, "ID": 41, "CALL": 41, "void": -1, "NUM": -1, "if": 41, "<": -1, ",": -1, "/": -1, "elif": 40, "+": -1, "-": -1, ")": -1, "==": -1, "return": 41, "<=": -1, "char": -1, "int": -1, "float": -1, "else": 41, ">=": -1, "*": -1, ";": -1, "#": 41}, "Type": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": 8, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": 10, "int": 7, "float": 9, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "B": {">": 26, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": 26, ",": -1, "/": 25, "elif": -1, "+": 26, "-": 26, ")": 26, "==": 26, "return": -1, "<=": 26, "char": -1, "int": -1, "float": -1, "else": -1, ">=": 26, "*": 25, ";": 26, "#": 26}, "CodeBody": {">": -1, "}": 11, "{": -1, "=": -1, "while": 12, "(": -1, "ID": 12, "CALL": 12, "void": 12, "NUM": -1, "if": 12, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": 12, "<=": -1, "char": 12, "int": 12, "float": 12, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "FuncCall": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": 54, "void": -1, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "NormalStatementFollow": {">": -1, "}": -1, "{": -1, "=": 20, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "FuncCallFollow": {">": -1, "}": -1, "{": -1, "=": 55, "while": -1, "(": 56, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "CodeList": {">": -1, "}": 17, "{": -1, "=": -1, "while": 16, "(": -1, "ID": 16, "CALL": 16, "void": -1, "NUM": -1, "if": 16, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": 16, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": 17}, "LoopStatement": {">": -1, "}": -1, "{": -1, "=": -1, "while": 51, "(": -1, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "JudgeStatementFollow": {">": 43, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": -1, "NUM": -1, "if": -1, "<": 43, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": 44, "==": 43, "return": -1, "<=": 43, "char": -1, "int": -1, "float": -1, "else": -1, ">=": 43, "*": -1, ";": -1, "#": 44}, "F": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": 29, "ID": 27, "CALL": -1, "void": -1, "NUM": 28, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": -1, "int": -1, "float": -1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "FuncsHead": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": 2, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": 2, "int": 2, "float": 2, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}, "Funcs": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": 1, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": 1, "int": 1, "float": 1, "else": -1, ">=": -1, "*": -1, ";": -1, "#": 3}, "Program": {">": -1, "}": -1, "{": -1, "=": -1, "while": -1, "(": -1, "ID": -1, "CALL": -1, "void": 0, "NUM": -1, "if": -1, "<": -1, ",": -1, "/": -1, "elif": -1, "+": -1, "-": -1, ")": -1, "==": -1, "return": -1, "<=": -1, "char": 0, "int": 0, "float": 0, "else": -1, ">=": -1, "*": -1, ";": -1, "#": -1}}