{"FuncsHead": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": 2, "char": 2, "break": -1, "return": -1, "ID": -1, "st": 2, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": 2, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": 2, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "LocalVarDefine": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": 17, "char": 17, "break": -1, "return": -1, "ID": -1, "st": 17, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": 17, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": 17, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "Code": {"+": -1, "==": -1, "NUM": -1, "while": 52, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": 54, "return": 56, "ID": 20, "st": -1, "}": -1, "<": -1, "CALL": 57, "{": -1, "int": -1, "continue": 55, "if": 36, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "Program": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": 0, "char": 0, "break": -1, "return": -1, "ID": -1, "st": 0, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": 0, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": 0, "(": -1, "struct": 0, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "FormalParametersFollow": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": 7, ",": 6, "elif": -1, "-": -1, ">": -1, "#": 7}, "FuncCallFollow": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": 59, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": 60, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "NormalStatementFollow": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": 22, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "B": {"+": 28, "==": 28, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": 27, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": 28, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": 28, "*": 27, ";": 28, "float": -1, "(": -1, "struct": -1, ">=": 28, ")": 28, ",": -1, "elif": -1, "-": 28, ">": 28, "#": 28}, "Operation": {"+": -1, "==": -1, "NUM": 23, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": 23, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": 23, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "FormalParameters": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": 4, "char": 4, "break": -1, "return": -1, "ID": -1, "st": 4, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": 4, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": 4, "(": -1, "struct": -1, ">=": -1, ")": 5, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "JudgeStatementFollow": {"+": -1, "==": 45, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": 45, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": 45, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": 45, ")": 46, ",": -1, "elif": -1, "-": -1, ">": 45, "#": 46}, "Struct": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": 66, "char": 66, "break": -1, "return": -1, "ID": -1, "st": 66, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": 66, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": 66, "(": -1, "struct": 65, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": 66}, "T": {"+": -1, "==": -1, "NUM": 26, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": 26, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": 26, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "A": {"+": 24, "==": 25, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": 25, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": 25, "*": -1, ";": 25, "float": -1, "(": -1, "struct": -1, ">=": 25, ")": 25, ",": -1, "elif": -1, "-": 24, ">": 25, "#": 25}, "LocalDefineList": {"+": -1, "==": -1, "NUM": -1, "while": 16, "else": -1, "=": -1, "/": -1, "void": 15, "char": 15, "break": 16, "return": 16, "ID": 16, "st": 15, "}": 16, "<": -1, "CALL": 16, "{": -1, "int": 15, "continue": 16, "if": 16, "<=": -1, "*": -1, ";": -1, "float": 15, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": 16}, "IfStatement": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": 37, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "CompareSymbol": {"+": -1, "==": 47, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": 50, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": 48, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": 49, ")": -1, ",": -1, "elif": -1, "-": -1, ">": 51, "#": -1}, "F": {"+": -1, "==": -1, "NUM": 30, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": 29, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": 31, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "Funcs": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": 1, "char": 1, "break": -1, "return": -1, "ID": -1, "st": 1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": 1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": 1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": 3}, "ArgsFollow": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": 64, ",": 62, "elif": -1, "-": -1, ">": -1, "#": 64}, "ElseIFPart": {"+": -1, "==": -1, "NUM": -1, "while": 43, "else": 43, "=": -1, "/": -1, "void": -1, "char": -1, "break": 43, "return": 43, "ID": 43, "st": -1, "}": 43, "<": -1, "CALL": 43, "{": -1, "int": -1, "continue": 43, "if": 43, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": 42, "-": -1, ">": -1, "#": 43}, "Type": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": 9, "char": 11, "break": -1, "return": -1, "ID": -1, "st": 12, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": 8, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": 10, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "FuncCall": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": -1, "CALL": 58, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "M": {"+": 32, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": 33, ">": -1, "#": -1}, "IFStatementFollow": {"+": -1, "==": -1, "NUM": -1, "while": 38, "else": 39, "=": -1, "/": -1, "void": -1, "char": -1, "break": 38, "return": 38, "ID": 38, "st": -1, "}": 38, "<": -1, "CALL": 38, "{": -1, "int": -1, "continue": 38, "if": 38, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": 39, "-": -1, ">": -1, "#": 38}, "CodeBody": {"+": -1, "==": -1, "NUM": -1, "while": 14, "else": -1, "=": -1, "/": -1, "void": 14, "char": 14, "break": 14, "return": 14, "ID": 14, "st": 14, "}": 13, "<": -1, "CALL": 14, "{": -1, "int": 14, "continue": 14, "if": 14, "<=": -1, "*": -1, ";": -1, "float": 14, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "N": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": 35, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": 34, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "CodeList": {"+": -1, "==": -1, "NUM": -1, "while": 18, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": 18, "return": 18, "ID": 18, "st": -1, "}": 19, "<": -1, "CALL": 18, "{": -1, "int": -1, "continue": 18, "if": 18, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": 19}, "NormalStatement": {"+": -1, "==": -1, "NUM": -1, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": 21, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "LoopStatement": {"+": -1, "==": -1, "NUM": -1, "while": 53, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": -1, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "JudgeStatement": {"+": -1, "==": -1, "NUM": 44, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": 44, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": 44, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}, "ElsePart": {"+": -1, "==": -1, "NUM": -1, "while": 40, "else": 41, "=": -1, "/": -1, "void": -1, "char": -1, "break": 40, "return": 40, "ID": 40, "st": -1, "}": 40, "<": -1, "CALL": 40, "{": -1, "int": -1, "continue": 40, "if": 40, "<=": -1, "*": -1, ";": -1, "float": -1, "(": -1, "struct": -1, ">=": -1, ")": -1, ",": -1, "elif": -1, "-": -1, ">": -1, "#": 40}, "Args": {"+": -1, "==": -1, "NUM": 61, "while": -1, "else": -1, "=": -1, "/": -1, "void": -1, "char": -1, "break": -1, "return": -1, "ID": 61, "st": -1, "}": -1, "<": -1, "CALL": -1, "{": -1, "int": -1, "continue": -1, "if": -1, "<=": -1, "*": -1, ";": -1, "float": -1, "(": 61, "struct": -1, ">=": -1, ")": 63, ",": -1, "elif": -1, "-": -1, ">": -1, "#": -1}}