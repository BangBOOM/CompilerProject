{"CodeBody": {"st": 14, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": 14, "float": 14, "-": -1, "continue": 14, ",": -1, "break": 14, "/": -1, "<=": -1, "elif": -1, "while": 14, "(": -1, "int": 14, "=": -1, ";": -1, "if": 14, "==": -1, ")": -1, "CALL": 14, "}": 13, "{": -1, "struct": -1, ">": -1, "void": 14, "<": -1, "return": 14, "ID": 14, "else": -1, "#": -1}, "JudgeStatementFollow": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": 45, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": 45, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": -1, "if": -1, "==": 45, ")": 46, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": 45, "void": -1, "<": 45, "return": -1, "ID": -1, "else": -1, "#": 46}, "F": {"st": -1, "NUM": 30, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": 31, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": 29, "else": -1, "#": -1}, "NormalStatementFollow": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": -1, "=": 22, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "LocalVarDefine": {"st": 17, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": 17, "float": 17, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": 17, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": 17, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "Code": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": 55, ",": -1, "break": 54, "/": -1, "<=": -1, "elif": -1, "while": 52, "(": -1, "int": -1, "=": -1, ";": -1, "if": 36, "==": -1, ")": -1, "CALL": 57, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": 56, "ID": 20, "else": -1, "#": -1}, "ElsePart": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": 40, ",": -1, "break": 40, "/": -1, "<=": -1, "elif": -1, "while": 40, "(": -1, "int": -1, "=": -1, ";": -1, "if": 40, "==": -1, ")": -1, "CALL": 40, "}": 40, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": 40, "ID": 40, "else": 41, "#": 40}, "LocalDefineList": {"st": 15, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": 15, "float": 15, "-": -1, "continue": 16, ",": -1, "break": 16, "/": -1, "<=": -1, "elif": -1, "while": 16, "(": -1, "int": 15, "=": -1, ";": -1, "if": 16, "==": -1, ")": -1, "CALL": 16, "}": 16, "{": -1, "struct": -1, ">": -1, "void": 15, "<": -1, "return": 16, "ID": 16, "else": -1, "#": 16}, "Program": {"st": 0, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": 0, "float": 0, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": 0, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": 0, ">": -1, "void": 0, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "Type": {"st": 12, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": 11, "float": 10, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": 8, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": 9, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "Operation": {"st": -1, "NUM": 23, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": 23, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": 23, "else": -1, "#": -1}, "Funcs": {"st": 1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": 1, "float": 1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": 1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": 1, "<": -1, "return": -1, "ID": -1, "else": -1, "#": 3}, "IfStatement": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": -1, "if": 37, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "CodeList": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": 18, ",": -1, "break": 18, "/": -1, "<=": -1, "elif": -1, "while": 18, "(": -1, "int": -1, "=": -1, ";": -1, "if": 18, "==": -1, ")": -1, "CALL": 18, "}": 19, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": 18, "ID": 18, "else": -1, "#": 19}, "M": {"st": -1, "NUM": -1, "+": 32, "*": -1, ">=": -1, "char": -1, "float": -1, "-": 33, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "LoopStatement": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": 53, "(": -1, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "FuncCall": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": 58, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "JudgeStatement": {"st": -1, "NUM": 44, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": 44, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": 44, "else": -1, "#": -1}, "N": {"st": -1, "NUM": -1, "+": -1, "*": 34, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": 35, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "FuncCallFollow": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": 60, "int": -1, "=": 59, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "Args": {"st": -1, "NUM": 61, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": 62, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": 61, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": 63, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": 61, "else": -1, "#": 63}, "FuncsHead": {"st": 2, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": 2, "float": 2, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": 2, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": 2, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "FormalParameters": {"st": 4, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": 4, "float": 4, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": 4, "=": -1, ";": -1, "if": -1, "==": -1, ")": 5, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": 4, "<": -1, "return": -1, "ID": -1, "else": -1, "#": -1}, "T": {"st": -1, "NUM": 26, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": 26, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": 26, "else": -1, "#": -1}, "A": {"st": -1, "NUM": -1, "+": 24, "*": -1, ">=": 25, "char": -1, "float": -1, "-": 24, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": 25, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": 25, "if": -1, "==": 25, ")": 25, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": 25, "void": -1, "<": 25, "return": -1, "ID": -1, "else": -1, "#": 25}, "NormalStatement": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": 21, "else": -1, "#": -1}, "CompareSymbol": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": 49, "char": -1, "float": -1, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": 48, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": -1, "if": -1, "==": 47, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": 51, "void": -1, "<": 50, "return": -1, "ID": -1, "else": -1, "#": -1}, "FormalParametersFollow": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": -1, ",": 6, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": -1, "if": -1, "==": -1, ")": 7, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": -1, "ID": -1, "else": -1, "#": 7}, "IFStatementFollow": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": 38, ",": -1, "break": 38, "/": -1, "<=": -1, "elif": 39, "while": 38, "(": -1, "int": -1, "=": -1, ";": -1, "if": 38, "==": -1, ")": -1, "CALL": 38, "}": 38, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": 38, "ID": 38, "else": 39, "#": 38}, "B": {"st": -1, "NUM": -1, "+": 28, "*": 27, ">=": 28, "char": -1, "float": -1, "-": 28, "continue": -1, ",": -1, "break": -1, "/": 27, "<=": 28, "elif": -1, "while": -1, "(": -1, "int": -1, "=": -1, ";": 28, "if": -1, "==": 28, ")": 28, "CALL": -1, "}": -1, "{": -1, "struct": -1, ">": 28, "void": -1, "<": 28, "return": -1, "ID": -1, "else": -1, "#": 28}, "Struct": {"st": 65, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": 65, "float": 65, "-": -1, "continue": -1, ",": -1, "break": -1, "/": -1, "<=": -1, "elif": -1, "while": -1, "(": -1, "int": 65, "=": -1, ";": -1, "if": -1, "==": -1, ")": -1, "CALL": -1, "}": -1, "{": -1, "struct": 64, ">": -1, "void": 65, "<": -1, "return": -1, "ID": -1, "else": -1, "#": 65}, "ElseIFPart": {"st": -1, "NUM": -1, "+": -1, "*": -1, ">=": -1, "char": -1, "float": -1, "-": -1, "continue": 43, ",": -1, "break": 43, "/": -1, "<=": -1, "elif": 42, "while": 43, "(": -1, "int": -1, "=": -1, ";": -1, "if": 43, "==": -1, ")": -1, "CALL": 43, "}": 43, "{": -1, "struct": -1, ">": -1, "void": -1, "<": -1, "return": 43, "ID": 43, "else": 43, "#": 43}}