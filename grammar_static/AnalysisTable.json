{"ElseIFPart": {"CALL": 43, "*": -1, "int": -1, "ID": 43, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": 42, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": 43, "}": 43, "==": -1, "=": -1, "-": -1, "break": 43, "continue": 43, "else": 43, "(": -1, "<=": -1, "+": -1, "while": 43, "if": 43, "/": -1, "#": 43}, "A": {"CALL": -1, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": 25, "void": -1, ",": -1, "elif": -1, ";": 25, "struct": -1, "st": -1, "char": -1, "<": 25, "NUM": -1, ")": 25, ">=": 25, "return": -1, "}": -1, "==": 25, "=": -1, "-": 24, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": 25, "+": 24, "while": -1, "if": -1, "/": -1, "#": 25}, "FormalParameters": {"CALL": -1, "*": -1, "int": 4, "ID": -1, "float": 4, "{": -1, ">": -1, "void": 4, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": 4, "char": 4, "<": -1, "NUM": -1, ")": 5, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "JudgeStatementFollow": {"CALL": -1, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": 45, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": 45, "NUM": -1, ")": 46, ">=": 45, "return": -1, "}": -1, "==": 45, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": 45, "+": -1, "while": -1, "if": -1, "/": -1, "#": 46}, "LocalDefineList": {"CALL": 16, "*": -1, "int": 15, "ID": 16, "float": 15, "{": -1, ">": -1, "void": 15, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": 15, "char": 15, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": 16, "}": 16, "==": -1, "=": -1, "-": -1, "break": 16, "continue": 16, "else": -1, "(": -1, "<=": -1, "+": -1, "while": 16, "if": 16, "/": -1, "#": 16}, "FuncCallFollow": {"CALL": -1, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": 59, "-": -1, "break": -1, "continue": -1, "else": -1, "(": 60, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "FuncsHead": {"CALL": -1, "*": -1, "int": 2, "ID": -1, "float": 2, "{": -1, ">": -1, "void": 2, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": 2, "char": 2, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "Funcs": {"CALL": -1, "*": -1, "int": 1, "ID": -1, "float": 1, "{": -1, ">": -1, "void": 1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": 1, "char": 1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": 3}, "N": {"CALL": -1, "*": 34, "int": -1, "ID": -1, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": 35, "#": -1}, "Args": {"CALL": -1, "*": -1, "int": -1, "ID": 61, "float": -1, "{": -1, ">": -1, "void": -1, ",": 62, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": 61, ")": 63, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": 61, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": 63}, "B": {"CALL": -1, "*": 27, "int": -1, "ID": -1, "float": -1, "{": -1, ">": 28, "void": -1, ",": -1, "elif": -1, ";": 28, "struct": -1, "st": -1, "char": -1, "<": 28, "NUM": -1, ")": 28, ">=": 28, "return": -1, "}": -1, "==": 28, "=": -1, "-": 28, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": 28, "+": 28, "while": -1, "if": -1, "/": 27, "#": 28}, "ElsePart": {"CALL": 40, "*": -1, "int": -1, "ID": 40, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": 40, "}": 40, "==": -1, "=": -1, "-": -1, "break": 40, "continue": 40, "else": 41, "(": -1, "<=": -1, "+": -1, "while": 40, "if": 40, "/": -1, "#": 40}, "NormalStatementFollow": {"CALL": -1, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": 22, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "IFStatementFollow": {"CALL": 38, "*": -1, "int": -1, "ID": 38, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": 39, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": 38, "}": 38, "==": -1, "=": -1, "-": -1, "break": 38, "continue": 38, "else": 39, "(": -1, "<=": -1, "+": -1, "while": 38, "if": 38, "/": -1, "#": 38}, "T": {"CALL": -1, "*": -1, "int": -1, "ID": 26, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": 26, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": 26, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "FuncCall": {"CALL": 58, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "FormalParametersFollow": {"CALL": -1, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": -1, "void": -1, ",": 6, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": 7, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": 7}, "Program": {"CALL": -1, "*": -1, "int": 0, "ID": -1, "float": 0, "{": -1, ">": -1, "void": 0, ",": -1, "elif": -1, ";": -1, "struct": 0, "st": 0, "char": 0, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "Operation": {"CALL": -1, "*": -1, "int": -1, "ID": 23, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": 23, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": 23, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "Type": {"CALL": -1, "*": -1, "int": 8, "ID": -1, "float": 10, "{": -1, ">": -1, "void": 9, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": 12, "char": 11, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "CompareSymbol": {"CALL": -1, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": 51, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": 50, "NUM": -1, ")": -1, ">=": 49, "return": -1, "}": -1, "==": 47, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": 48, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "Struct": {"CALL": -1, "*": -1, "int": 65, "ID": -1, "float": 65, "{": -1, ">": -1, "void": 65, ",": -1, "elif": -1, ";": -1, "struct": 64, "st": 65, "char": 65, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": 65}, "NormalStatement": {"CALL": -1, "*": -1, "int": -1, "ID": 21, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "LoopStatement": {"CALL": -1, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": 53, "if": -1, "/": -1, "#": -1}, "F": {"CALL": -1, "*": -1, "int": -1, "ID": 29, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": 30, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": 31, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "M": {"CALL": -1, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": 33, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": 32, "while": -1, "if": -1, "/": -1, "#": -1}, "LocalVarDefine": {"CALL": -1, "*": -1, "int": 17, "ID": -1, "float": 17, "{": -1, ">": -1, "void": 17, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": 17, "char": 17, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "IfStatement": {"CALL": -1, "*": -1, "int": -1, "ID": -1, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": -1, "<=": -1, "+": -1, "while": -1, "if": 37, "/": -1, "#": -1}, "Code": {"CALL": 57, "*": -1, "int": -1, "ID": 20, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": 56, "}": -1, "==": -1, "=": -1, "-": -1, "break": 54, "continue": 55, "else": -1, "(": -1, "<=": -1, "+": -1, "while": 52, "if": 36, "/": -1, "#": -1}, "JudgeStatement": {"CALL": -1, "*": -1, "int": -1, "ID": 44, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": 44, ")": -1, ">=": -1, "return": -1, "}": -1, "==": -1, "=": -1, "-": -1, "break": -1, "continue": -1, "else": -1, "(": 44, "<=": -1, "+": -1, "while": -1, "if": -1, "/": -1, "#": -1}, "CodeBody": {"CALL": 14, "*": -1, "int": 14, "ID": 14, "float": 14, "{": -1, ">": -1, "void": 14, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": 14, "char": 14, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": 14, "}": 13, "==": -1, "=": -1, "-": -1, "break": 14, "continue": 14, "else": -1, "(": -1, "<=": -1, "+": -1, "while": 14, "if": 14, "/": -1, "#": -1}, "CodeList": {"CALL": 18, "*": -1, "int": -1, "ID": 18, "float": -1, "{": -1, ">": -1, "void": -1, ",": -1, "elif": -1, ";": -1, "struct": -1, "st": -1, "char": -1, "<": -1, "NUM": -1, ")": -1, ">=": -1, "return": 18, "}": 19, "==": -1, "=": -1, "-": -1, "break": 18, "continue": 18, "else": -1, "(": -1, "<=": -1, "+": -1, "while": 18, "if": 18, "/": -1, "#": 19}}