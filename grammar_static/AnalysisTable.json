{"FuncsHead": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": 2, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": 2, "ID": -1, ">": -1, ",": -1, "float": 2, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": 2, "==": -1, "#": -1}, "NormalStatementFollow": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": 20, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": -1}, "N": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": -1, ",": -1, "float": -1, "/": 33, "else": -1, "NUM": -1, "*": 32, "char": -1, "==": -1, "#": -1}, "IfStatement": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": 35, "}": -1, "return": -1, "int": -1, "ID": -1, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": -1}, "ElseIFPart": {"<=": -1, "CALL": 41, ")": -1, "+": -1, "void": -1, ">=": -1, "while": 41, "(": -1, "<": -1, ";": -1, "elif": 40, "-": -1, "{": -1, "=": -1, "if": 41, "}": 41, "return": 41, "int": -1, "ID": 41, ">": -1, ",": -1, "float": -1, "/": -1, "else": 41, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": 41}, "Operation": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": 21, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": 21, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": 21, "*": -1, "char": -1, "==": -1, "#": -1}, "LocalVarDefine": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": 15, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": 15, "ID": -1, ">": -1, ",": -1, "float": 15, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": 15, "==": -1, "#": -1}, "FuncCall": {"<=": -1, "CALL": 54, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": -1}, "Type": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": 8, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": 7, "ID": -1, ">": -1, ",": -1, "float": 9, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": 10, "==": -1, "#": -1}, "M": {"<=": -1, "CALL": -1, ")": -1, "+": 30, "void": -1, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": 31, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": -1}, "F": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": 29, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": 27, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": 28, "*": -1, "char": -1, "==": -1, "#": -1}, "CompareSymbol": {"<=": 46, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": 47, "while": -1, "(": -1, "<": 48, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": 49, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": 45, "#": -1}, "LoopStatement": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": 51, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": -1}, "LocalDefineList": {"<=": -1, "CALL": 14, ")": -1, "+": -1, "void": 13, ">=": -1, "while": 14, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": 14, "}": 14, "return": 14, "int": 13, "ID": 14, ">": -1, ",": -1, "float": 13, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": 13, "==": -1, "#": 14}, "IFStatementFollow": {"<=": -1, "CALL": 36, ")": -1, "+": -1, "void": -1, ">=": -1, "while": 36, "(": -1, "<": -1, ";": -1, "elif": 37, "-": -1, "{": -1, "=": -1, "if": 36, "}": 36, "return": 36, "int": -1, "ID": 36, ">": -1, ",": -1, "float": -1, "/": -1, "else": 37, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": 36}, "NormalStatement": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": 19, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": -1}, "Program": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": 0, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": 0, "ID": -1, ">": -1, ",": -1, "float": 0, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": 0, "==": -1, "#": -1}, "Funcs": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": 1, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": 1, "ID": -1, ">": -1, ",": -1, "float": 1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": 1, "==": -1, "#": 3}, "B": {"<=": 26, "CALL": -1, ")": 26, "+": 26, "void": -1, ">=": 26, "while": -1, "(": -1, "<": 26, ";": 26, "elif": -1, "-": 26, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": 26, ",": -1, "float": -1, "/": 25, "else": -1, "NUM": -1, "*": 25, "char": -1, "==": 26, "#": 26}, "FuncCallFollow": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": 56, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": 55, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": -1}, "A": {"<=": 23, "CALL": -1, ")": 23, "+": 22, "void": -1, ">=": 23, "while": -1, "(": -1, "<": 23, ";": 23, "elif": -1, "-": 22, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": 23, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": 23, "#": 23}, "FormalParameters": {"<=": -1, "CALL": -1, ")": 6, "+": -1, "void": 4, ">=": -1, "while": -1, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": 4, "ID": -1, ">": -1, ",": 5, "float": 4, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": 4, "==": -1, "#": 6}, "Code": {"<=": -1, "CALL": 53, ")": -1, "+": -1, "void": -1, ">=": -1, "while": 50, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": 34, "}": -1, "return": 52, "int": -1, "ID": 18, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": -1}, "T": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": 24, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": 24, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": 24, "*": -1, "char": -1, "==": -1, "#": -1}, "Args": {"<=": -1, "CALL": -1, ")": 59, "+": -1, "void": -1, ">=": -1, "while": -1, "(": 57, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": 57, ">": -1, ",": 58, "float": -1, "/": -1, "else": -1, "NUM": 57, "*": -1, "char": -1, "==": -1, "#": 59}, "ElsePart": {"<=": -1, "CALL": 38, ")": -1, "+": -1, "void": -1, ">=": -1, "while": 38, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": 38, "}": 38, "return": 38, "int": -1, "ID": 38, ">": -1, ",": -1, "float": -1, "/": -1, "else": 39, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": 38}, "CodeList": {"<=": -1, "CALL": 16, ")": -1, "+": -1, "void": -1, ">=": -1, "while": 16, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": 16, "}": 17, "return": 16, "int": -1, "ID": 16, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": -1, "#": 17}, "JudgeStatement": {"<=": -1, "CALL": -1, ")": -1, "+": -1, "void": -1, ">=": -1, "while": -1, "(": 42, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": 42, ">": -1, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": 42, "*": -1, "char": -1, "==": -1, "#": -1}, "CodeBody": {"<=": -1, "CALL": 12, ")": -1, "+": -1, "void": 12, ">=": -1, "while": 12, "(": -1, "<": -1, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": 12, "}": 11, "return": 12, "int": 12, "ID": 12, ">": -1, ",": -1, "float": 12, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": 12, "==": -1, "#": -1}, "JudgeStatementFollow": {"<=": 43, "CALL": -1, ")": 44, "+": -1, "void": -1, ">=": 43, "while": -1, "(": -1, "<": 43, ";": -1, "elif": -1, "-": -1, "{": -1, "=": -1, "if": -1, "}": -1, "return": -1, "int": -1, "ID": -1, ">": 43, ",": -1, "float": -1, "/": -1, "else": -1, "NUM": -1, "*": -1, "char": -1, "==": 43, "#": 44}}